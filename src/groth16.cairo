use bn::traits::FieldOps;
use bn::curve::groups::ECOperations;
use bn::g::{Affine, AffineG1Impl, AffineG2Impl, g1, g2, AffineG1, AffineG2,};
use bn::fields::{Fq, Fq2, print::Fq12Display};
use bn::fields::{fq12, Fq12, Fq12Utils, Fq12Exponentiation};
use bn::curve::pairing;
use pairing::optimal_ate::{single_ate_pairing, ate_miller_loop};
use pairing::optimal_ate_impls::{SingleMillerPrecompute, SingleMillerSteps};

#[test]
#[available_gas(20000000000)]
fn simple_test() {
    let A_G1 = g1(
        19092006581455788758709004813424108450475230671546198110182704126760952021248,
        18428185916649502171614192229986655674799279684527591370328182794110727996633
    );
    let neg_A_G1 = g1(A_G1.x.c0, A_G1.y.neg().c0);
    let B_G2 = g2(
        1110332524507442648511549408896049077062269578877062826069065960274388112308,
        15815785354885964222010325771656100864105333417560377595802485750386873282739,
        20784382045877636010618629654573620888044404319093695781168988411617616204166,
        5234804291052944426941184034424257962428641145809086397589880058685491457835
    );
    let C_G1 = g1(
        21755526246297599392782387322262927251662305599666002632514868138515690603377,
        19883332083442129478217826420060112230198011363938980948134718366700920887106
    );
    let rhs = ate_miller_loop(C_G1, AffineG2Impl::one());
    let nlhs = ate_miller_loop(neg_A_G1, B_G2);
    let pairing_product = (nlhs * rhs).final_exponentiation();
    assert(pairing_product == fq12(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), 'lhs == rhs failed')
}

fn vk() -> (AffineG1, AffineG2, AffineG2, AffineG2, Fq12, (AffineG1, AffineG1)) {
    let mut alpha = g1(
        20491192805390485299153009773594534940189261866228447918068658471970481763042,
        9383485363053290200918347156157836566562967994039712273449902621266178545958
    );
    let beta = g2(
        6375614351688725206403948262868962793625744043794305715222011528459656738731,
        4252822878758300859123897981450591353533073413197771768651442665752259397132,
        10505242626370262277552901082094356697409835680220590971873171140371331206856,
        21847035105528745403288232691147584728191162732299865338377159692350059136679
    );
    let gamma = g2(
        10857046999023057135944570762232829481370756359578518086990519993285655852781,
        11559732032986387107991004021392285783925812861821192530917403151452391805634,
        8495653923123431417604973247489272438418190587263600148770280649306958101930,
        4082367875863433681332203403145435568316851327593401208105741076214120093531
    );
    let delta = g2(
        18843522656454103229460441939617973919282852773928454389351548381771109175804,
        20939788735433971235553050176856161353732417040828392785429509147312127378598,
        20154620275540267962893477662314018482859018034691595131178696575286779357689,
        4547106032091524596969837323375385497187441697194445474662172759730343393129
    );
    let inputs = (
        g1(
            1655549413518972190198478012616802994254462093161203201613599472264958303841,
            21742734017792296281216385119397138748114275727065024271646515586404591497876
        ),
        g1(
            16497930821522159474595176304955625435616718625609462506360632944366974274906,
            10404924572941018678793755094259635830045501866471999610240845041996101882275
        )
    );
    let alpha_beta_miller = fq12(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    (alpha, beta, gamma, delta, alpha_beta_miller, inputs)
}
